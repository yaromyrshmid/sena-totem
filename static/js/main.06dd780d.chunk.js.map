{"version":3,"sources":["axios.js","store/actions/data.js","store/actions/actionTypes.js","store/actions/auth.js","components/exp/ExpForm.js","components/exp/ExpTable.js","components/inc/IncForm.js","components/inc/IncTable.js","components/storage/StorageTable.js","containers/storage/Storage.js","store/actions/tables.js","containers/complects/ComplectsForm.js","containers/complects/ComplectsTable.js","containers/workArea/workArea.js","containers/auth/Auth.js","containers/navigation/Navigation.js","ui/Spinner/Spinner.js","App.js","serviceWorker.js","store/reducers/data.js","store/reducers/auth.js","store/reducers/tables.js","index.js","assets/images/logo.jpg"],"names":["instance","axios","create","baseURL","setDataExp","data","type","exp","setDataInc","inc","setDataComplects","complects","loginSuccess","token","userId","idToken","logOut","localStorage","removeItem","checkLogoutTimeout","expirationTime","dispatch","setTimeout","connect","state","expData","lists","auth","actions","props","waresList","wares","map","item","key","value","subwaresList","subwares","expsList","exps","colorsList","colors","initialValues","name","color","quantity","totalPrice","validate","values","errors","isNaN","onSubmit","setSubmitting","resetForm","time","Date","toISOString","split","trim","Number","post","then","response","console","log","newExpData","catch","error","isSubmitting","setFieldValue","Container","Row","Col","className","checked","onChange","list","id","disabled","toFixed","xs","span","offset","deleteRowHandler","event","target","delete","res","table","Object","keys","reverse","expKey","index","onClick","Fragment","Table","striped","bordered","hover","incData","complectsData","useState","complectErrorMessage","setComplectErrorMessage","price","income","length","line","newIncData","render","complect","push","copyColor","complectFormHandler","arrayHelpers","component","remove","loaded","incKey","expTable","tables","incTable","lastRow","quantityE","totalPriceE","quantityI","totalPriceI","quantityS","totalPriceS","ware","sort","wareName","wareIndex","colorIndex","coloredWare","priceE","incomeColorIndex","i","priceI","Infinity","priceS","colorWare","topRow","rows","wareColor","wareColorIndex","tableSubwares","subware","lastRowTable","createExpTable","tableExpWares","tableExpSubWares","tableExpExp","hasOwnProperty","isColor","createIncTable","tableIncWares","tableIncSubWares","incItem","incIndex","useEffect","checkIfComplectExists","complectExists","newComplectsData","complectKey","authData","getDataEI","get","createFormLists","indexOf","showError","Tabs","defaultActiveKey","Tab","eventKey","title","signedIn","to","logIn","returnSecureToken","expirationDate","getTime","expiresIn","setItem","localId","email","password","placeholder","authState","Navbar","bg","variant","exact","Brand","Image","src","Logo","Nav","spinner","authCheckState","getItem","path","loading","Boolean","window","location","hostname","match","initialState","reducer","action","composeEnhancers","compose","rootReducer","combineReducers","dataReducer","authReducer","tablesReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.06dd780d.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://sena-totem.firebaseio.com/'\r\n});\r\n\r\nexport default instance;","import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios';\r\n\r\nexport const setDataExp = (data) => {\r\n  return {\r\n    type: actionTypes.SET_DATA_EXP,\r\n    exp: data\r\n  };\r\n};\r\n\r\nexport const setDataInc = (data) => {\r\n  return {\r\n    type: actionTypes.SET_DATA_INC,\r\n    inc: data\r\n  };\r\n};\r\n\r\nexport const setDataComplects = (data) => {\r\n  return {\r\n    type: actionTypes.SET_DATA_COMPLECTS,\r\n    complects: data\r\n  }\r\n}\r\n\r\nexport const getDataEI = (idToken) => {\r\n  return dispatch => {\r\n    axios.get('/.json?auth=' + idToken)\r\n    .then( res => {\r\n      console.log(res.data);\r\n      dispatch(setDataExp(res.data.exp));\r\n      dispatch(setDataInc(res.data.inc));\r\n      dispatch(setDataComplects(res.data.complects));\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    })\r\n  };\r\n};\r\n\r\nexport const createFormLists = (expData) => {\r\n  const wares = [];\r\n  const subwares = [];\r\n  const exps = [];\r\n  const colors = [];\r\n\r\n  Object.keys(expData).map(key => {\r\n    switch (expData[key].type) {\r\n      case 'Товар':\r\n      if (!(wares.indexOf(expData[key].name) > -1)) {\r\n        wares.push(expData[key].name)\r\n      };\r\n      break;\r\n      case 'Супутній товар':\r\n        if (!(subwares.indexOf(expData[key].name) > -1)) {\r\n          subwares.push(expData[key].name)\r\n        };\r\n      break;\r\n      case 'Витрата':\r\n        if (!(exps.indexOf(expData[key].name) > -1)) {\r\n          exps.push(expData[key].name)\r\n        };\r\n      break;\r\n      default:\r\n        break;\r\n    }\r\n    if (!(colors.indexOf(expData[key].color) > -1)) {\r\n      colors.push(expData[key].color)\r\n    };\r\n  });\r\n  wares.sort();\r\n  subwares.sort();\r\n  exps.sort();\r\n  colors.sort();\r\n  const lists = {\r\n    wares: wares,\r\n    subwares: subwares,\r\n    exps: exps,\r\n    colors: colors\r\n  }\r\n  return {\r\n    type: actionTypes.CREATE_FORM_LISTS,\r\n    lists: lists\r\n  };\r\n};","export const LOG_IN_START = 'LOG_IN_START';\r\nexport const LOG_IN = 'LOG_IN';\r\nexport const LOG_OUT = 'LOG_OUT';\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\n\r\nexport const GET_DATA_E_I = 'GET_DATA_E_I';\r\nexport const SET_DATA_EXP = 'SET_DATA_EXP';\r\nexport const SET_DATA_INC = 'SET_DATA_INC';\r\nexport const SET_DATA_COMPLECTS = 'SET_DATA_COMPLECTS';\r\nexport const CREATE_FORM_LISTS = 'CREATE_FORM_LISTS';\r\n\r\nexport const CREATE_EXP_TABLE = 'CREATE_EXP_TABLE';\r\nexport const CREATE_INC_TABLE = 'CREATE_INC_TABLE';","import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const logInStart = () => {\r\n  return {\r\n    type: actionTypes.LOG_IN_START\r\n  }\r\n}\r\n\r\nexport const loginSuccess = (token, userId) => {\r\n  return {\r\n    type: actionTypes.LOG_IN_SUCCESS,\r\n    idToken: token,\r\n    userId: userId\r\n  }\r\n}\r\n\r\nexport const logOut = () => {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('expirationDate');\r\n  localStorage.removeItem('userId');\r\n  return {\r\n    type: actionTypes.LOG_OUT\r\n  };\r\n};\r\n\r\nexport const checkLogoutTimeout = (expirationTime) => {\r\n  return dispatch => {\r\n    setTimeout(() => {\r\n      dispatch(logOut());\r\n    }, expirationTime * 1000)\r\n  };\r\n};\r\n\r\nexport const logIn = (values) => {\r\n  return dispatch => {\r\n    dispatch(logInStart());\r\n    values.returnSecureToken = true;\r\n    axios.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDFX9LAlOi-6ONPEXG3hw22qJT5aIo91Z4', values)\r\n    .then(response => {\r\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\r\n      localStorage.setItem('token', response.data.idToken);\r\n      localStorage.setItem('userId', response.data.localId);\r\n      localStorage.setItem('expirationDate', expirationDate);\r\n      \r\n      dispatch(loginSuccess(response.data.idToken, response.data.localId));\r\n      dispatch(checkLogoutTimeout(response.data.expiresIn));\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n      \r\n    })\r\n  };\r\n}\r\n\r\nexport const authCheckState = () => {\r\n  return dispatch => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      dispatch(logOut());\r\n    } else {\r\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n      if (expirationDate <= new Date()) {\r\n        dispatch(logOut());\r\n      } else {\r\n        const userId = localStorage.getItem('userId');\r\n        dispatch(loginSuccess (token, userId));\r\n        dispatch(checkLogoutTimeout((expirationDate.getTime() - new Date().getTime())/1000));\r\n      };\r\n    };\r\n  };\r\n};","import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nimport axios from '../../axios';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst ExpForm = props => {\r\n  \r\n  const waresList = props.lists.wares.map((item) => {\r\n    return <option key={item} value={item} />\r\n  });\r\n\r\n  const subwaresList = props.lists.subwares.map((item) => {\r\n    return <option key={item} value={item} />\r\n  });\r\n\r\n  const expsList = props.lists.exps.map((item) => {\r\n    return <option key={item} value={item} />\r\n  });\r\n\r\n  const colorsList = props.lists.colors.map((item) => {\r\n    return <option key={item} value={item} />\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n    initialValues={{ \r\n      type: '',\r\n      name: '',\r\n      color: '',\r\n      quantity: '',\r\n      totalPrice: ''\r\n    }}\r\n    validate={values => {\r\n      let errors = {};\r\n      if (!values.type) {\r\n        errors.type = 'Необхідно обрати категорію!'\r\n      }\r\n      if (!values.name) {\r\n        errors.name = 'Необхідно внести назву!'\r\n      }\r\n      if (isNaN(values.quantity) || ((values.quantity === 0 || values.quantity === '') && (values.type === 'Товар' || values.type === 'Супутній товар'))) {\r\n        errors.quantity = 'Невірна кількість!'\r\n      }\r\n      if (!values.totalPrice || isNaN(values.totalPrice)) {\r\n        errors.totalPrice = 'Невірна вартість!'\r\n      }\r\n\r\n      return errors;\r\n    }}\r\n    onSubmit={(values, { setSubmitting, resetForm }, initialValues) => {\r\n      values.time = new Date().toISOString().split('T')[0];\r\n      if(values.color.trim() === '') {\r\n        values.color = 'н/з';\r\n      }\r\n      values.quantity = Number(values.quantity);\r\n      values.totalPrice = Number(values.totalPrice);\r\n      axios.post('/exp.json?auth=' + props.idToken, values)\r\n      .then(response => {\r\n        console.log(response);\r\n        setSubmitting(false);\r\n        const newExpData = {\r\n          ...props.expData,\r\n          [response.data.name]: values\r\n        };\r\n        props.setDataExp(newExpData);        \r\n        resetForm(initialValues);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n    }}\r\n  >\r\n    {({ isSubmitting, values, setFieldValue }) => (\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <Form>\r\n              <Row>\r\n                <Col>                  \r\n                  <Field\r\n                    className=\"radioInput\"\r\n                    type=\"radio\"\r\n                    name=\"type\"\r\n                    value=\"Товар\"\r\n                    checked={values.type === \"Товар\"}\r\n                    onChange={() => setFieldValue(\"type\", \"Товар\")}\r\n                  />\r\n                  <label>Товар</label>                  \r\n                  <Field\r\n                    className=\"radioInput\"\r\n                    type=\"radio\"\r\n                    name=\"type\"\r\n                    value=\"Супутній товар\"\r\n                    checked={values.type === \"Супутній товар\"}\r\n                    onChange={() => setFieldValue(\"type\", \"Супутній товар\")}\r\n                  />\r\n                  <label>Супутній товар</label>                  \r\n                  <Field\r\n                    className=\"radioInput\"\r\n                    type=\"radio\"\r\n                    name=\"type\"\r\n                    value=\"Витрата\"\r\n                    checked={values.type === \"Витрата\"}\r\n                    onChange={() => setFieldValue(\"type\", \"Витрата\")}\r\n                  />\r\n                  <label>Витрата</label>\r\n                  <span className=\"errorMessage\">\r\n                    <ErrorMessage name=\"type\" />\r\n                  </span>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Col>\r\n                  <label>Назва</label>\r\n                  <Field name=\"name\" list=\"name\" />              \r\n                    <datalist id=\"name\">\r\n                      {values.type === 'Товар' && waresList}\r\n                      {values.type === 'Супутній товар' && subwaresList}\r\n                      {values.type === 'Витрата' && expsList}\r\n                    </datalist>\r\n                  <span className=\"errorMessage\">\r\n                    <ErrorMessage name=\"name\" />\r\n                  </span>                  \r\n                  <label>Колір</label>\r\n                  <Field name=\"color\" list=\"color\" />              \r\n                    <datalist id=\"color\">\r\n                      {colorsList}\r\n                    </datalist>        \r\n                  \r\n                  <label>Кількість</label>\r\n                  <Field \r\n                    className=\"input-number\"\r\n                    name=\"quantity\" \r\n                    type=\"number\"         \r\n                    disabled={values.type === 'Витрата'}/>  \r\n                  <span className=\"errorMessage\">\r\n                    <ErrorMessage name=\"quantity\" />\r\n                  </span>                     \r\n                  <label>Вартість</label>\r\n                  <Field className=\"input-number\" name=\"totalPrice\" type=\"number\"/>\r\n                  <span className=\"errorMessage\">\r\n                    <ErrorMessage name=\"totalPrice\" />\r\n                  </span>                        \r\n                  <label>Ціна за одиницю</label>\r\n                  <Field \r\n                    className=\"input-number\"\r\n                    name=\"price\" \r\n                    value={(isNaN(values.totalPrice / values.quantity) || values.type === 'Витрата') ? 0 : (values.totalPrice / values.quantity).toFixed(2)} \r\n                    onChange={() => setFieldValue(\"price\", values.totalPrice / values.quantity)}\r\n                    disabled/>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>                            \r\n                <Col xs={{span: 3, offset: 9}}>\r\n                  <button className=\"submitData\" type=\"submit\" disabled={isSubmitting}>\r\n                    Внести\r\n                  </button>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    )}\r\n  </Formik>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    expData: state.data.expData,\r\n    lists: state.data.lists,\r\n    idToken: state.auth.idToken\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setDataExp: (expData) => dispatch(actions.setDataExp(expData))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpForm);","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nimport axios from '../../axios';\r\nimport * as actions from '../../store/actions/index';\r\n\r\n\r\nconst ExpTable = props => {\r\n  const deleteRowHandler = (event) => {\r\n    const id = event.target.id;\r\n    axios.delete('/exp/' + id + '.json?auth=' + props.idToken)\r\n    .then( res => {\r\n      console.log(res);\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    })\r\n    const newExpData = {};\r\n    for (const key in props.expData) {\r\n      if (key !== id) {\r\n        newExpData[key] = props.expData[key]\r\n      }\r\n    }\r\n    props.setDataExp(newExpData);\r\n  }\r\n\r\n  \r\n  const table = (!props.expData) ? null : (\r\n    Object.keys(props.expData).reverse().map((expKey, index) => {\r\n      return (\r\n        <tr key={expKey}>\r\n          <td>{index+1}</td>\r\n          <td>{props.expData[expKey].time}</td>\r\n          <td>{props.expData[expKey].type}</td>\r\n          <td>{props.expData[expKey].name}</td>\r\n          <td>{props.expData[expKey].color}</td>\r\n          <td>{props.expData[expKey].quantity}</td>\r\n          <td>{props.expData[expKey].totalPrice}</td>\r\n          <td>{(props.expData[expKey].totalPrice / props.expData[expKey].quantity).toFixed(2)}</td>\r\n          <td><button id={expKey} onClick={deleteRowHandler}>x</button></td>\r\n        </tr>\r\n      )\r\n    }) \r\n  )  \r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Дата</th>\r\n            <th>Тип</th>\r\n            <th>Назва</th>\r\n            <th>Колір</th>\r\n            <th>Кількість</th>\r\n            <th>Вартість</th>\r\n            <th>Ціна за одиницю</th>\r\n            <th>Видалити</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {table}\r\n        </tbody>\r\n      </Table>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    expData: state.data.expData,\r\n    idToken: state.auth.idToken\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setDataExp: (expData) => dispatch(actions.setDataExp(expData))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpTable);","import React, { useState } from 'react';\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport axios from '../../axios';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst IncForm = props => {\r\n  const [complectErrorMessage, setComplectErrorMessage] = useState(null);\r\n\r\n  const waresList = props.lists.wares.map((item) => {\r\n    return <option key={item} value={item}>{item}</option>\r\n  });\r\n\r\n  const subwaresList = props.lists.subwares.map((item) => {\r\n    return <option key={item} value={item}>{item}</option>\r\n  });\r\n\r\n  const colorsList = props.lists.colors.map((item) => {\r\n    return <option key={item} value={item}>{item}</option>\r\n  });\r\n  \r\n  const complectFormHandler = (values) => {\r\n    if (values.income.length > 0) {\r\n      if (values.income[0].quantity > 0 && values.income[0].color !== 'н/з') {\r\n        if (values.income[0].type === 'Товар' && values.income.length === 1 && values.income[0].name !== '') {\r\n          setComplectErrorMessage(null);\r\n          let complect = null;\r\n          Object.keys(props.complectsData).map(key => {\r\n            if (props.complectsData[key].name === values.income[0].name) {\r\n              complect = props.complectsData[key].complect;\r\n            }\r\n          })\r\n          complect.map(key => {\r\n            values.income.push({\r\n              type: 'Супутній товар',\r\n              name: key.name,\r\n              color: key.copyColor ? values.income[0].color : 'н/з',\r\n              quantity: values.income[0].quantity                          \r\n              })\r\n          })\r\n          setComplectErrorMessage(<span>Готово!</span>);\r\n        } else {\r\n          setComplectErrorMessage(<span className=\"errorMessage\">Не обрано товар!</span>);\r\n        }\r\n      } else {\r\n        setComplectErrorMessage(<span className=\"errorMessage\">Не вказано кількість або колір!</span>);\r\n      }      \r\n    } else {\r\n      setComplectErrorMessage(<span className=\"errorMessage\">Не обрано товар!</span>);\r\n    }\r\n  }\r\n\r\n\r\n  return (    \r\n    <Formik\r\n        initialValues={{\r\n        price: '',\r\n        income: [\r\n          {\r\n            type: '',\r\n            name: '',\r\n            color: 'н/з',\r\n            quantity: ''\r\n          }\r\n        ]\r\n      }}\r\n      validate={values => {\r\n        let errors = {};\r\n        if (!values.price || isNaN(values.price)) {\r\n          errors.price = 'Невірна ціна!'\r\n        }\r\n        if (values.income.length < 1) {\r\n          errors.income = 'Не внесено товару!'\r\n        }\r\n        values.income.map((line, index) => {\r\n          if (!values.income[index].type) {\r\n            errors.type = 'Категорія товару не обрана!'\r\n          }\r\n          if (!values.income[index].name || values.income[index].name === '--Обери назву--' ) {\r\n            errors.name = 'Назва товару не обрана!'\r\n          }\r\n          if (isNaN(values.income[index].quantity) || values.income[index].quantity === 0 || values.income[index].quantity === '') {\r\n            errors.quantity = 'Невірна кількість!'\r\n          }\r\n        })\r\n        return errors;\r\n      }}\r\n\r\n      isSubmitting={false}\r\n\r\n      onSubmit={(values, { setSubmitting, resetForm }, initialValues) => {\r\n        values.time = new Date().toISOString().split('T')[0];\r\n        axios.post('/inc.json?auth=' + props.idToken, values)\r\n        .then(response => {\r\n          console.log(response);\r\n          setSubmitting(false);\r\n          const newIncData = {\r\n            ...props.incData,\r\n            [response.data.name]: values\r\n          };\r\n          props.setDataInc(newIncData);\r\n          resetForm(initialValues);\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        })\r\n      }}\r\n\r\n      render={({ isSubmitting, values, setFieldValue }) => (\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <Form>\r\n                <Row>\r\n                  <Col xs={2}>\r\n                    <label>\r\n                      Ціна\r\n                      <Field className=\"input-number\" name=\"price\" type=\"number\"/>\r\n                      <span className=\"errorMessage\"><ErrorMessage name=\"price\" /></span>\r\n                      <span className=\"errorMessage\"><ErrorMessage name=\"type\"/></span>\r\n                      <span className=\"errorMessage\"><ErrorMessage name=\"name\"/></span>\r\n                      <span className=\"errorMessage\"><ErrorMessage name=\"quantity\"/></span>    \r\n                    </label>\r\n                  </Col>\r\n                  <Col  xs={10}>\r\n                    <button type=\"button\" \r\n                      onClick={() => complectFormHandler(values)}\r\n                    > Комплект </button>\r\n                    {complectErrorMessage}\r\n                  </Col>\r\n                </Row>\r\n                <FieldArray\r\n                  name=\"income\"\r\n                  render={arrayHelpers => (\r\n                    <React.Fragment>\r\n                      {values.income && values.income.length > 0 ? (\r\n                        values.income.map((line, index) => (\r\n                          <Row key={index}>\r\n                            <Col>\r\n                              <fieldset>\r\n                                <Field\r\n                                  className=\"radioInput\"\r\n                                  type=\"radio\"\r\n                                  name={`income.${index}.type`}\r\n                                  value=\"Товар\"\r\n                                  checked={values.income[index].type === \"Товар\"}\r\n                                  onChange={() => setFieldValue(`income.${index}.type`, \"Товар\")}\r\n                                />\r\n                                <label>Товар</label>\r\n\r\n                              \r\n                                <Field\r\n                                  className=\"radioInput\"\r\n                                  type=\"radio\"\r\n                                  name={`income.${index}.type`}\r\n                                  value=\"Супутній товар\"\r\n                                  checked={values.income[index].type === \"Супутній товар\"}\r\n                                  onChange={() => setFieldValue(`income.${index}.type`, \"Супутній товар\")}\r\n                                />\r\n                                <label>Супутній товар</label>\r\n                              </fieldset>\r\n                              <fieldset>\r\n                                <label>Назва</label>\r\n                                <Field component=\"select\" name={`income.${index}.name`} >\r\n                                  <option value={'--Обери назву--'}>--Обери назву--</option>\r\n                                  {values.income[index].type === 'Товар' && waresList}\r\n                                  {values.income[index].type === 'Супутній товар' && subwaresList}\r\n                                </Field>    \r\n                              \r\n                                <label>Колір</label>\r\n                                <Field component=\"select\" name={`income.${index}.color`}>\r\n                                  {colorsList}\r\n                                </Field>\r\n                                \r\n                                <label>Кількість</label>\r\n                                <Field className=\"input-number\" name={`income.${index}.quantity`} type=\"number\"/>                          \r\n                              </fieldset>\r\n                              <button\r\n                                className=\"button-x\"\r\n                                type=\"button\"\r\n                                onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\r\n                              >\r\n                                x\r\n                              </button>\r\n                            </Col>\r\n                          </Row>\r\n                        ))\r\n                      ) : null \r\n                      }\r\n                      <Row>\r\n                        <Col>\r\n                          <button type=\"button\" onClick={() => {\r\n                            arrayHelpers.push({\r\n                            type: '',\r\n                            name: 'Обери назву',\r\n                            color: 'н/з',\r\n                            quantity: ''                          \r\n                            })\r\n                          }}>                    \r\n                            Додати рядок\r\n                          </button>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col xs={{ span: 3, offset: 9 }}>\r\n                          <button className=\"submitData\" type=\"submit\" disabled={isSubmitting}>Внести</button>\r\n                        </Col>\r\n                      </Row>\r\n                    </React.Fragment>\r\n                  )}\r\n                />\r\n              </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      )}\r\n    />\r\n\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    incData: state.data.incData,\r\n    lists: state.data.lists,\r\n    complectsData: state.data.complectsData,\r\n    idToken: state.auth.idToken\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setDataInc: (incData) => dispatch(actions.setDataInc(incData))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IncForm);","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport axios from '../../axios';\r\n\r\nimport * as actions from '../../store/actions/index';\r\n\r\n\r\nconst IncTable = props => {\r\n  const deleteRowHandler = (event) => {\r\n    const id = event.target.id;\r\n    axios.delete('/inc/' + id + '.json?auth=' + props.idToken)\r\n    .then( res => {\r\n      console.log(res);\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    })\r\n    const newIncData = {};\r\n    for (const key in props.incData) {\r\n      if (key !== id) {\r\n        newIncData[key] = props.incData[key]\r\n      }\r\n    }\r\n    props.setDataInc(newIncData);\r\n  }\r\n\r\n\r\n  const table = props.loaded ? (\r\n    Object.keys(props.incData).reverse().map((incKey, index) => {\r\n      const complect = props.incData[incKey].income.map((line, index) => {\r\n        return (\r\n          <tr key={`${incKey}_${index}`}>\r\n            <td></td>\r\n            <td></td>\r\n            <td>{line.type}</td>\r\n            <td>{line.name}</td>\r\n            <td>{line.color}</td>\r\n            <td>{line.quantity}</td>\r\n            <td></td>\r\n            <td></td>\r\n          </tr>\r\n        )\r\n      })\r\n      return (\r\n        <tbody key={incKey}>\r\n          <tr>\r\n            <td>{index+1}</td>\r\n            <td>{props.incData[incKey].time}</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>{props.incData[incKey].price}</td>\r\n            <td><button id={incKey} onClick={deleteRowHandler}>x</button></td>\r\n          </tr>\r\n          {complect}\r\n        </tbody>\r\n      )\r\n    }) \r\n  ) : null;  \r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Дата</th>\r\n            <th>Тип</th>\r\n            <th>Назва</th>\r\n            <th>Колір</th>\r\n            <th>Кількість</th>\r\n            <th>Ціна</th>\r\n            <th>Видалити</th>           \r\n          </tr>\r\n        </thead>\r\n        {table}\r\n      </Table>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    incData: state.data.incData,\r\n    loaded: state.data.loaded,\r\n    idToken: state.auth.idToken\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setDataInc: (incData) => dispatch(actions.setDataInc(incData))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IncTable);","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nconst StorageTable = props => {\r\n\r\n  //Creating form for last summing row\r\n  const lastRow = {\r\n    quantityE: 0,\r\n    totalPriceE: 0,\r\n    quantityI: 0,\r\n    totalPriceI: 0,\r\n    quantityS: 0,\r\n    totalPriceS: 0\r\n  };\r\n\r\n  //Creating storage table\r\n  const table = (!props.loaded ) ? null : (\r\n    //Iterating through wares in expTable\r\n    Object.keys(props.expTable.ware).sort().map((wareName, wareIndex) => {\r\n      //Creating new ware object\r\n      const ware = {};\r\n      ware.name = wareName;\r\n      ware.colors = [];\r\n      //Pushing colors into ware object\r\n      for (let colorIndex = 0; colorIndex < props.expTable.ware[wareName].length; colorIndex++ ) {\r\n        //Creating color object\r\n        const coloredWare = {};\r\n        coloredWare.color = props.expTable.ware[wareName][colorIndex].color;\r\n        coloredWare.quantityE = props.expTable.ware[wareName][colorIndex].quantity;\r\n        coloredWare.totalPriceE = props.expTable.ware[wareName][colorIndex].totalPrice;\r\n        coloredWare.priceE = props.expTable.ware[wareName][colorIndex].price;\r\n        //Checking if ware is in incTable\r\n        if (props.incTable.ware[wareName]) {\r\n          \r\n          //Checking if ware has same color in incTable\r\n          let incomeColorIndex = false;\r\n          for (let i = 0; i < props.incTable.ware[wareName].length; i++) {\r\n            if (props.incTable.ware[wareName][i].color === coloredWare.color) {\r\n              incomeColorIndex = i;\r\n            } \r\n          }\r\n          //Passing income info to the colored ware\r\n          //If color exists in income\r\n          if (typeof incomeColorIndex == 'number') {\r\n            coloredWare.quantityI = props.incTable.ware[wareName][incomeColorIndex].quantity;\r\n            coloredWare.totalPriceI =  props.incTable.ware[wareName][incomeColorIndex].totalPrice;\r\n            coloredWare.priceI = (props.incTable.ware[wareName][incomeColorIndex].price !== Infinity) ? props.incTable.ware[wareName][incomeColorIndex].price : 0;\r\n            coloredWare.quantityS = coloredWare.quantityE - coloredWare.quantityI;\r\n            coloredWare.priceS = coloredWare.priceI ? coloredWare.priceI : coloredWare.priceE;\r\n            coloredWare.totalPriceS = coloredWare.priceS * coloredWare.quantityS;\r\n          } \r\n          //If color doesn't exist in income\r\n          else {\r\n            coloredWare.quantityI = 0;\r\n            coloredWare.totalPriceI = 0;\r\n            coloredWare.priceI = 0;\r\n            coloredWare.quantityS = coloredWare.quantityE;\r\n            coloredWare.totalPriceS = coloredWare.totalPriceE;\r\n            coloredWare.priceS = coloredWare.priceE;\r\n          }          \r\n        //If ware doesn't exist in income\r\n        } else {\r\n          coloredWare.quantityI = 0;\r\n          coloredWare.totalPriceI = 0;\r\n          coloredWare.priceI = 0;\r\n          coloredWare.quantityS = coloredWare.quantityE;\r\n          coloredWare.totalPriceS = coloredWare.totalPriceE;\r\n          coloredWare.priceS = coloredWare.priceE;\r\n        }        \r\n\r\n        ware.colors.push(coloredWare);        \r\n      }\r\n\r\n      ware.quantityE = 0;\r\n      ware.quantityI = 0;\r\n      ware.quantityS = 0;\r\n      ware.totalPriceE = 0;\r\n      ware.totalPriceI = 0;\r\n      ware.totalPriceS = 0;\r\n      //Summing up data from colors\r\n      ware.colors.map(colorWare => {\r\n        ware.quantityE += colorWare.quantityE;\r\n        ware.quantityI += colorWare.quantityI;\r\n        ware.quantityS += colorWare.quantityS;\r\n        ware.totalPriceE += colorWare.totalPriceE;\r\n        ware.totalPriceI += colorWare.totalPriceI;\r\n        ware.totalPriceS += colorWare.totalPriceS;\r\n      })\r\n      //Counting prices for ware\r\n      ware.priceE = ware.totalPriceE / ware.quantityE;\r\n      ware.priceI = (ware.totalPriceI === 0 || ware.quantityI === 0) ? 0 : ware.totalPriceI / ware.quantityI;\r\n      ware.priceS = ware.totalPriceS / ware.quantityS;\r\n      //Creating ware row\r\n      const topRow = (\r\n        <tr>\r\n          <th>{wareIndex+1}</th>\r\n          <th>{ware.name}</th>\r\n          <th></th>\r\n          <th>{ware.quantityE}</th>\r\n          <th>{(ware.totalPriceE).toFixed(0)}</th>\r\n          <th>{(ware.priceE).toFixed(2)}</th>\r\n          <th>{ware.quantityI}</th>\r\n          <th>{(ware.totalPriceI).toFixed(0)}</th>\r\n          <th>{(ware.priceI).toFixed(2)}</th>\r\n          <th>{ware.quantityS}</th>\r\n          <th>{(ware.totalPriceS).toFixed(0)}</th>\r\n          <th>{(ware.priceS).toFixed(2)}</th>\r\n        </tr>\r\n      )\r\n      //Creating color rows\r\n      const rows = ware.colors.map((wareColor, wareColorIndex) => {\r\n        return (\r\n          <tr key={`${ware.name}_${wareColor.color}`}> \r\n            <td>{`${wareIndex+1}.${wareColorIndex+1}`}</td>\r\n            <td></td>\r\n            <td>{wareColor.color}</td>\r\n            <td>{wareColor.quantityE}</td>\r\n            <td>{(wareColor.totalPriceE).toFixed(0)}</td>\r\n            <td>{(wareColor.priceE).toFixed(2)}</td>\r\n            <td>{wareColor.quantityI}</td>\r\n            <td>{(wareColor.totalPriceI).toFixed(0)}</td>\r\n            <td>{(wareColor.priceI).toFixed(2)}</td>\r\n            <td>{wareColor.quantityS}</td>\r\n            <td>{(wareColor.totalPriceS).toFixed(0)}</td>\r\n            <td>{(wareColor.priceS).toFixed(2)}</td>\r\n          </tr>\r\n        )\r\n      })\r\n      //Amending total row\r\n      lastRow.quantityE += ware.quantityE;\r\n      lastRow.totalPriceE += ware.totalPriceE;\r\n      lastRow.quantityI += ware.quantityI;\r\n      lastRow.totalPriceI += ware.totalPriceI;\r\n      lastRow.quantityS += ware.quantityS;\r\n      lastRow.totalPriceS += ware.totalPriceS;\r\n\r\n      return (\r\n        <tbody key={wareName}>\r\n          {topRow}\r\n          {rows}\r\n        </tbody>\r\n      )    \r\n    })\r\n  )\r\n\r\n    //Creating storage subwarestable\r\n    const tableSubwares = (!props.loaded) ? null : (\r\n      //Iterating through wares in expTable\r\n      Object.keys(props.expTable.subware).sort().map((wareName, wareIndex) => {\r\n        //Creating new ware object\r\n        const ware = {};\r\n        ware.name = wareName;\r\n        ware.colors = [];\r\n        //Pushing colors into ware object\r\n        for (let colorIndex = 0; colorIndex < props.expTable.subware[wareName].length; colorIndex++ ) {\r\n          //Creating color object\r\n          const coloredWare = {};\r\n          coloredWare.color = props.expTable.subware[wareName][colorIndex].color;\r\n          coloredWare.quantityE = props.expTable.subware[wareName][colorIndex].quantity;\r\n          coloredWare.totalPriceE = props.expTable.subware[wareName][colorIndex].totalPrice;\r\n          coloredWare.priceE = props.expTable.subware[wareName][colorIndex].price;\r\n          //Checking if ware is in incTable\r\n          if (props.incTable.subware[wareName]) {\r\n            \r\n            //Checking if ware has same color in incTable\r\n            let incomeColorIndex = false;\r\n            for (let i = 0; i < props.incTable.subware[wareName].length; i++) {\r\n              if (props.incTable.subware[wareName][i].color === coloredWare.color) {\r\n                incomeColorIndex = i;\r\n              } \r\n            }\r\n            //Passing income info to the colored ware\r\n            //If color exists in income\r\n            if (typeof incomeColorIndex == 'number') {\r\n              coloredWare.quantityI = props.incTable.subware[wareName][incomeColorIndex].quantity;\r\n              coloredWare.totalPriceI =  props.incTable.subware[wareName][incomeColorIndex].totalPrice;\r\n              coloredWare.priceI = (props.incTable.subware[wareName][incomeColorIndex].price !== Infinity) ? props.incTable.subware[wareName][incomeColorIndex].price : 0;\r\n              coloredWare.quantityS = coloredWare.quantityE - coloredWare.quantityI;\r\n              coloredWare.priceS = coloredWare.priceI ? coloredWare.priceI : coloredWare.priceE;\r\n              coloredWare.totalPriceS = coloredWare.priceS * coloredWare.quantityS;\r\n            } \r\n            //If color doesn't exist in income\r\n            else {\r\n              coloredWare.quantityI = 0;\r\n              coloredWare.totalPriceI = 0;\r\n              coloredWare.priceI = 0;\r\n              coloredWare.quantityS = coloredWare.quantityE;\r\n              coloredWare.totalPriceS = coloredWare.totalPriceE;\r\n              coloredWare.priceS = coloredWare.priceE;\r\n            }          \r\n          //If ware doesn't exist in income\r\n          } else {\r\n            coloredWare.quantityI = 0;\r\n            coloredWare.totalPriceI = 0;\r\n            coloredWare.priceI = 0;\r\n            coloredWare.quantityS = coloredWare.quantityE;\r\n            coloredWare.totalPriceS = coloredWare.totalPriceE;\r\n            coloredWare.priceS = coloredWare.priceE;\r\n          }        \r\n  \r\n          ware.colors.push(coloredWare);        \r\n        }\r\n  \r\n        ware.quantityE = 0;\r\n        ware.quantityI = 0;\r\n        ware.quantityS = 0;\r\n        ware.totalPriceE = 0;\r\n        ware.totalPriceI = 0;\r\n        ware.totalPriceS = 0;\r\n        //Summing up data from colors\r\n        ware.colors.map(colorWare => {\r\n          ware.quantityE += colorWare.quantityE;\r\n          ware.quantityI += colorWare.quantityI;\r\n          ware.quantityS += colorWare.quantityS;\r\n          ware.totalPriceE += colorWare.totalPriceE;\r\n          ware.totalPriceI += colorWare.totalPriceI;\r\n          ware.totalPriceS += colorWare.totalPriceS;\r\n        })\r\n        //Counting prices for ware\r\n        ware.priceE = ware.totalPriceE / ware.quantityE;\r\n        ware.priceI = (ware.totalPriceI === 0 || ware.quantityI === 0) ? 0 : ware.totalPriceI / ware.quantityI;\r\n        ware.priceS = ware.totalPriceS / ware.quantityS;\r\n        //Creating ware row\r\n        const topRow = (\r\n          <tr>\r\n            <th>{wareIndex+1}</th>\r\n            <th>{ware.name}</th>\r\n            <th></th>\r\n            <th>{ware.quantityE}</th>\r\n            <th>{(ware.totalPriceE).toFixed(0)}</th>\r\n            <th>{(ware.priceE).toFixed(2)}</th>\r\n            <th>{ware.quantityI}</th>\r\n            <th>{(ware.totalPriceI).toFixed(0)}</th>\r\n            <th>{(ware.priceI).toFixed(2)}</th>\r\n            <th>{ware.quantityS}</th>\r\n            <th>{(ware.totalPriceS).toFixed(0)}</th>\r\n            <th>{(ware.priceS).toFixed(2)}</th>\r\n          </tr>\r\n        )\r\n        //Creating color rows\r\n        const rows = ware.colors.map((wareColor, wareColorIndex) => {\r\n          return (\r\n            <tr key={`${ware.name}_${wareColor.color}`}> \r\n              <td>{`${wareIndex+1}.${wareColorIndex+1}`}</td>\r\n              <td></td>\r\n              <td>{wareColor.color}</td>\r\n              <td>{wareColor.quantityE}</td>\r\n              <td>{(wareColor.totalPriceE).toFixed(0)}</td>\r\n              <td>{(wareColor.priceE).toFixed(2)}</td>\r\n              <td>{wareColor.quantityI}</td>\r\n              <td>{(wareColor.totalPriceI).toFixed(0)}</td>\r\n              <td>{(wareColor.priceI).toFixed(2)}</td>\r\n              <td>{wareColor.quantityS}</td>\r\n              <td>{(wareColor.totalPriceS).toFixed(0)}</td>\r\n              <td>{(wareColor.priceS).toFixed(2)}</td>\r\n            </tr>\r\n          )\r\n        })\r\n        //Amending total row\r\n        lastRow.quantityE += ware.quantityE;\r\n        lastRow.totalPriceE += ware.totalPriceE;\r\n        lastRow.quantityI += ware.quantityI;\r\n        lastRow.totalPriceI += ware.totalPriceI;\r\n        lastRow.quantityS += ware.quantityS;\r\n        lastRow.totalPriceS += ware.totalPriceS;\r\n  \r\n        return (\r\n          <tbody key={wareName}>\r\n            {topRow}\r\n            {rows}\r\n          </tbody>\r\n        )    \r\n      })\r\n    )\r\n\r\n\r\n  //Creating total row\r\n  const lastRowTable = (\r\n    <tr>\r\n      <th></th>\r\n      <th>Всього</th>\r\n      <th></th>\r\n      <th>{lastRow.quantityE}</th>\r\n      <th>{lastRow.totalPriceE}</th>\r\n      <th></th>\r\n      <th>{lastRow.quantityI}</th>\r\n      <th>{lastRow.totalPriceI}</th>\r\n      <th></th>\r\n      <th>{lastRow.quantityS}</th>\r\n      <th>{(lastRow.totalPriceS).toFixed(2)}</th>\r\n      <th></th>\r\n    </tr>\r\n  )\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Товар</th>\r\n            <th>Колір</th>\r\n            <th>Кількість виготовлено</th>\r\n            <th>Вартість виготовлено</th>\r\n            <th>Собівартість одиниці</th>\r\n            <th>Кількість продано</th>\r\n            <th>Вартість продано</th>\r\n            <th>Ціна одиниці продано</th>\r\n            <th>Кількість на складі</th>\r\n            <th>Вартість на складі</th>\r\n            <th>Ціна одиниці на складі</th>\r\n          </tr>\r\n        </thead>\r\n\r\n          {table}\r\n          {tableSubwares}\r\n        <tbody>\r\n          {lastRowTable}\r\n        </tbody>\r\n      </Table>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    expTable: state.tables.expTable,\r\n    incTable: state.tables.incTable,\r\n    loaded: state.tables.loaded\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(StorageTable);","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport StorageTable from '../../components/storage/StorageTable';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst Storage = props => {\r\n  useEffect(() => {\r\n    props.createExpTable(props.expData);\r\n    props.createIncTable(props.incData);\r\n  }, [props] )\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <StorageTable />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    expData: state.data.expData,\r\n    incData: state.data.incData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    createExpTable: (expData) => dispatch(actions.createExpTable(expData)),\r\n    createIncTable: (incData) => dispatch(actions.createIncTable(incData))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Storage);","import * as actionTypes from './actionTypes';\r\n\r\nexport const createExpTable = (expData) => {\r\n  const tableExpWares = {};\r\n  const tableExpSubWares = {};\r\n  const tableExpExp = {};\r\n  const expTable = {};\r\n  if (expData) {\r\n    // Iterating through expences\r\n    Object.keys(expData).map((expKey, index) => {\r\n      //Checking if is a ware\r\n      if (expData[expKey].type === 'Товар') {\r\n        //Checking if ware is in a table\r\n        if (tableExpWares.hasOwnProperty(expData[expKey].name)) {\r\n          let isColor = false;\r\n          //Checking if ware color in a table\r\n          for (let i = 0; i < tableExpWares[expData[expKey].name].length; i++ ) {\r\n            //Adding to table if ware color is present\r\n            if (expData[expKey].color === tableExpWares[expData[expKey].name][i].color) {\r\n              tableExpWares[expData[expKey].name][i].quantity += expData[expKey].quantity;\r\n              tableExpWares[expData[expKey].name][i].totalPrice += expData[expKey].totalPrice;\r\n              tableExpWares[expData[expKey].name][i].price = tableExpWares[expData[expKey].name][i].totalPrice / tableExpWares[expData[expKey].name][i].quantity;\r\n              isColor = true\r\n            } \r\n          }\r\n          //Adding to table if ware color is new\r\n          if (!isColor) {\r\n            const ware = {};\r\n            ware.color = expData[expKey].color;\r\n            ware.quantity = expData[expKey].quantity;\r\n            ware.totalPrice = expData[expKey].totalPrice;\r\n            ware.price = expData[expKey].totalPrice / expData[expKey].quantity;\r\n            tableExpWares[expData[expKey].name].push(ware);\r\n          }\r\n        } \r\n        //Adding to table if ware is new\r\n        else {\r\n          tableExpWares[expData[expKey].name] = [];\r\n          const ware = {};\r\n          ware.color = expData[expKey].color;\r\n          ware.quantity = expData[expKey].quantity;\r\n          ware.totalPrice = expData[expKey].totalPrice;\r\n          ware.price = expData[expKey].totalPrice / expData[expKey].quantity;\r\n          tableExpWares[expData[expKey].name].push(ware);\r\n        }\r\n      }\r\n\r\n      //Checking if is a subware\r\n      if (expData[expKey].type === 'Супутній товар') {\r\n        //Checking if ware is in a table\r\n        if (tableExpSubWares.hasOwnProperty(expData[expKey].name)) {\r\n          let isColor = false;\r\n          //Checking if ware color in a table\r\n          for (let i = 0; i < tableExpSubWares[expData[expKey].name].length; i++ ) {\r\n            //Adding to table if ware color is present\r\n            if (expData[expKey].color === tableExpSubWares[expData[expKey].name][i].color) {\r\n              tableExpSubWares[expData[expKey].name][i].quantity += expData[expKey].quantity;\r\n              tableExpSubWares[expData[expKey].name][i].totalPrice += expData[expKey].totalPrice;\r\n              tableExpSubWares[expData[expKey].name][i].price = tableExpSubWares[expData[expKey].name][i].totalPrice / tableExpSubWares[expData[expKey].name][i].quantity;\r\n              isColor = true\r\n            } \r\n          }\r\n          //Adding to table if ware color is new\r\n          if (!isColor) {\r\n            const ware = {};\r\n            ware.color = expData[expKey].color;\r\n            ware.quantity = expData[expKey].quantity;\r\n            ware.totalPrice = expData[expKey].totalPrice;\r\n            ware.price = expData[expKey].totalPrice / expData[expKey].quantity;\r\n            tableExpSubWares[expData[expKey].name].push(ware);\r\n          }\r\n        } \r\n        //Adding to table if ware is new\r\n        else {\r\n          tableExpSubWares[expData[expKey].name] = [];\r\n          const ware = {};\r\n          ware.color = expData[expKey].color;\r\n          ware.quantity = expData[expKey].quantity;\r\n          ware.totalPrice = expData[expKey].totalPrice;\r\n          ware.price = expData[expKey].totalPrice / expData[expKey].quantity;\r\n          tableExpSubWares[expData[expKey].name].push(ware);\r\n        }\r\n      }\r\n\r\n      //Checking if is an expence\r\n      if (expData[expKey].type === 'Витрата') {\r\n        //Checking if ware is in a table\r\n        if (tableExpExp.hasOwnProperty(expData[expKey].name)) {\r\n          let isColor = false;\r\n          //Checking if ware color in a table\r\n          for (let i = 0; i < tableExpExp[expData[expKey].name].length; i++ ) {\r\n            //Adding to table if ware color is present\r\n            if (expData[expKey].color === tableExpExp[expData[expKey].name][i].color) {\r\n              tableExpExp[expData[expKey].name][i].quantity += expData[expKey].quantity;\r\n              tableExpExp[expData[expKey].name][i].totalPrice += expData[expKey].totalPrice;\r\n              tableExpExp[expData[expKey].name][i].price = tableExpExp[expData[expKey].name][i].totalPrice / tableExpExp[expData[expKey].name][i].quantity;\r\n              isColor = true\r\n            } \r\n          }\r\n          //Adding to table if ware color is new\r\n          if (!isColor) {\r\n            const ware = {};\r\n            ware.color = expData[expKey].color;\r\n            ware.quantity = expData[expKey].quantity;\r\n            ware.totalPrice = expData[expKey].totalPrice;\r\n            ware.price = expData[expKey].totalPrice / expData[expKey].quantity;\r\n            tableExpExp[expData[expKey].name].push(ware);\r\n          }\r\n        } \r\n        //Adding to table if ware is new\r\n        else {\r\n          tableExpExp[expData[expKey].name] = [];\r\n          const ware = {};\r\n          ware.color = expData[expKey].color;\r\n          ware.quantity = expData[expKey].quantity;\r\n          ware.totalPrice = expData[expKey].totalPrice;\r\n          ware.price = expData[expKey].totalPrice / expData[expKey].quantity;\r\n          tableExpExp[expData[expKey].name].push(ware);\r\n        }\r\n      }    \r\n    })      \r\n    expTable.ware = tableExpWares;\r\n    expTable.subware = tableExpSubWares;\r\n    expTable.exp = tableExpExp;\r\n  }\r\n  return {\r\n    type: actionTypes.CREATE_EXP_TABLE,\r\n    expTable: expTable\r\n  };\r\n};\r\n\r\nexport const createIncTable = (incData) => {\r\n  const tableIncWares = {};\r\n  const tableIncSubWares = {};\r\n  const incTable = {};\r\n  //Check if incData received\r\n  if (incData) {\r\n    //Iteration through income instances\r\n    Object.keys(incData).map((incKey, index) => {\r\n      //Maping each income item\r\n      incData[incKey].income.map((incItem, incIndex) => {\r\n        //Creating object to push into income arrays\r\n        const item = {type: incItem.type}\r\n        const totalPrice = (incIndex === 0) ? incData[incKey].price : 0;\r\n        item[incItem.name] = {\r\n          color: incItem.color,\r\n          quantity: incItem.quantity,\r\n          totalPrice: totalPrice,\r\n          price: incItem.quantity / totalPrice\r\n        }\r\n        //Checking if object is ware\r\n        if (item.type === \"Товар\") {\r\n          //Checking if ware already exists\r\n          if (tableIncWares[incData[incKey].income[incIndex].name]) {\r\n            let isColor = false;\r\n            //Iterating through color of each ware\r\n            for (let i = 0; i < tableIncWares[incData[incKey].income[incIndex].name].length; i++ ) {\r\n              //Checking if color exists\r\n              if (tableIncWares[incData[incKey].income[incIndex].name][i].color === item[incItem.name].color) {\r\n                //Amending item if color exist\r\n                tableIncWares[incData[incKey].income[incIndex].name][i].quantity += item[incItem.name].quantity;\r\n                tableIncWares[incData[incKey].income[incIndex].name][i].totalPrice += item[incItem.name].totalPrice;\r\n                tableIncWares[incData[incKey].income[incIndex].name][i].price = tableIncWares[incData[incKey].income[incIndex].name][i].totalPrice / tableIncWares[incData[incKey].income[incIndex].name][i].quantity;\r\n                isColor = true\r\n              } \r\n            }\r\n            //Adding array item if no such color\r\n            if (!isColor) {\r\n              tableIncWares[incData[incKey].income[incIndex].name].push(item[incItem.name])  \r\n            }\r\n            //Adding object if no such ware\r\n          } else {\r\n            tableIncWares[incData[incKey].income[incIndex].name] = []\r\n            tableIncWares[incData[incKey].income[incIndex].name].push(item[incItem.name])\r\n          }\r\n          \r\n        } else if (item.type === \"Супутній товар\") {\r\n          if (tableIncSubWares[incData[incKey].income[incIndex].name]) {\r\n            let isColor = false;\r\n            for (let i = 0; i < tableIncSubWares[incData[incKey].income[incIndex].name].length; i++ ) {\r\n              if (tableIncSubWares[incData[incKey].income[incIndex].name][i].color === item[incItem.name].color) {\r\n                tableIncSubWares[incData[incKey].income[incIndex].name][i].quantity += item[incItem.name].quantity;\r\n                tableIncSubWares[incData[incKey].income[incIndex].name][i].totalPrice += item[incItem.name].totalPrice;\r\n                tableIncSubWares[incData[incKey].income[incIndex].name][i].price = tableIncSubWares[incData[incKey].income[incIndex].name][i].totalPrice / tableIncSubWares[incData[incKey].income[incIndex].name][i].quantity;\r\n                isColor = true\r\n              } \r\n            }\r\n            if (!isColor) {\r\n              tableIncSubWares[incData[incKey].income[incIndex].name].push(item[incItem.name])\r\n            }\r\n          } else {\r\n            tableIncSubWares[incData[incKey].income[incIndex].name] = []\r\n            tableIncSubWares[incData[incKey].income[incIndex].name].push(item[incItem.name])\r\n          }\r\n        }\r\n      })\r\n    })\r\n    incTable.ware = tableIncWares;\r\n    incTable.subware = tableIncSubWares;\r\n  }\r\n\r\n  return {\r\n    type: actionTypes.CREATE_INC_TABLE,\r\n    incTable: incTable\r\n  };\r\n} \r\n\r\n","import React, { useState } from 'react';\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport axios from '../../axios';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst ComplectsForm = props => {  \r\n\r\n  const waresList = props.lists.wares.map((item) => {\r\n    return <option key={item} value={item}>{item}</option>\r\n  });\r\n\r\n  const subwaresList = props.lists.subwares.map((item) => {\r\n    return <option key={item} value={item}>{item}</option>\r\n  });\r\n\r\n  return (    \r\n    <Formik\r\n        initialValues={{\r\n          name: '',\r\n          complect: [\r\n            {\r\n              name: '',              \r\n              copyColor: false\r\n            }\r\n          ]\r\n      }}\r\n      validate={values => {\r\n        let errors = {};\r\n        let checkIfComplectExists = 0;\r\n        Object.keys(props.complectsData).map(key => {\r\n          if (props.complectsData[key].name === values.name) {\r\n            checkIfComplectExists++\r\n          }\r\n        })\r\n        if ( checkIfComplectExists > 0 ) {\r\n          errors.complectExists = 'Комплект вже існує'\r\n        }\r\n        if (values.name === '') {\r\n          errors.name = 'Не внесено товару!'\r\n        }\r\n        if (values.complect.length < 1) {\r\n          errors.complect = 'Не внесено супутнього товару!'\r\n        }\r\n        values.complect.map((line, index) => {          \r\n          if (!values.complect[index].name || values.complect[index].name === '--Обери назву--' ) {\r\n            errors.name = 'Назва супутнього товару не обрана!'\r\n          }\r\n        })\r\n        return errors;\r\n      }}\r\n\r\n      isSubmitting={false}\r\n\r\n      onSubmit={(values, { setSubmitting, resetForm }, initialValues) => {\r\n        values.time = new Date().toISOString().split('T')[0];\r\n        axios.post('/complects.json?auth=' + props.idToken, values)\r\n        .then(response => {\r\n          console.log(response);\r\n          setSubmitting(false);\r\n          const newComplectsData = {\r\n            ...props.complectsData,\r\n            [response.data.name]: values\r\n          };\r\n          props.setDataComplects(newComplectsData);\r\n          resetForm(initialValues);\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        })\r\n      }}\r\n\r\n      render={({ isSubmitting, values, setFieldValue }) => (\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <Form>\r\n                <fieldset>\r\n                  <label>Назва</label>\r\n                  <Field component=\"select\" name={`name`} >\r\n                    <option value={'--Обери назву--'}>--Обери назву--</option>\r\n                    {waresList}\r\n                  </Field>\r\n                </fieldset>               \r\n                <FieldArray\r\n                  name=\"complect\"\r\n                  render={arrayHelpers => (\r\n                    <React.Fragment>\r\n                      {values.complect && values.complect.length > 0 ? (\r\n                        values.complect.map((line, index) => (\r\n                          <Row key={index}>\r\n                            <Col xs={5}>\r\n                              <fieldset>\r\n                                <label>Назва супутнього товару</label>\r\n                                <Field component=\"select\" name={`complect.${index}.name`} >\r\n                                  <option value={'--Обери назву--'}>--Обери назву--</option>\r\n                                  {subwaresList}\r\n                                </Field>\r\n                              </fieldset>\r\n                            </Col>\r\n                            <Col xs={2}>\r\n                              <fieldset>\r\n                                <label>Має колір</label>\r\n                                <Field name={`complect.${index}.copyColor`} type=\"checkbox\" value={`complect.${index}.copyColor`} className=\"checkbox\"/>                          \r\n                              </fieldset>\r\n                            </Col>\r\n                            <Col xs={1}>\r\n                              <button\r\n                                className=\"button-x\"\r\n                                type=\"button\"\r\n                                onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\r\n                              >\r\n                                x\r\n                              </button>\r\n                            </Col>\r\n                          </Row>\r\n                        ))\r\n                      ) : null \r\n                      }\r\n                      <Row>\r\n                        <Col>\r\n                          <button type=\"button\" onClick={() => {\r\n                            arrayHelpers.push({\r\n                              name: '',              \r\n                              copyColor: false\r\n                            })\r\n                          }}>                    \r\n                            Додати рядок\r\n                          </button>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col xs={{ span: 3, offset: 9 }}>\r\n                          <button className=\"submitData\" type=\"submit\" disabled={isSubmitting}>Внести</button>\r\n                        </Col>\r\n                      </Row>\r\n                    </React.Fragment>\r\n                  )}\r\n                />\r\n              </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      )}\r\n    />\r\n\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    complectsData: state.data.complectsData,\r\n    lists: state.data.lists,\r\n    idToken: state.auth.idToken\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setDataComplects: (complectsData) => dispatch(actions.setDataComplects(complectsData))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ComplectsForm);","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport axios from '../../axios';\r\n\r\nimport * as actions from '../../store/actions/index';\r\n\r\n\r\nconst ComplectsTable = props => {\r\n  const deleteRowHandler = (event) => {\r\n    const id = event.target.id;\r\n    axios.delete('/complects/' + id + '.json?auth=' + props.idToken)\r\n    .then( res => {\r\n      console.log(res);\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    })\r\n    const newComplectsData = {};\r\n    for (const key in props.complectsData) {\r\n      if (key !== id) {\r\n        newComplectsData[key] = props.complectsData[key]\r\n      }\r\n    }\r\n    props.setDataComplects(newComplectsData);\r\n  }\r\n\r\n  const table = props.loaded ? (\r\n    Object.keys(props.complectsData).reverse().map((complectKey, index) => {\r\n      const complect = props.complectsData[complectKey].complect.map((line, index) => {\r\n        return (\r\n          <tr key={`${complectKey}_${index}`}>\r\n            <td></td>\r\n            <td>{line.name}</td>\r\n            <td>{line.copyColor ? 'Так' : 'Ні'}</td>\r\n            <td></td>\r\n          </tr>\r\n        )\r\n      })\r\n      return (\r\n        <tbody key={complectKey}>\r\n          <tr>\r\n            <td>{index+1}</td>\r\n            <td>{props.complectsData[complectKey].name}</td>\r\n            <td></td>            \r\n            <td><button id={complectKey} onClick={deleteRowHandler}>x</button></td>\r\n          </tr>\r\n          {complect}\r\n        </tbody>\r\n      )\r\n    }) \r\n  ) : null;  \r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>            \r\n            <th>Назва</th>\r\n            <th>Чи має колір</th>\r\n            <th>Видалити</th>           \r\n          </tr>\r\n        </thead>\r\n        {table}\r\n      </Table>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    complectsData: state.data.complectsData,\r\n    loaded: state.data.loaded,\r\n    idToken: state.auth.idToken\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setDataComplects: (complectsData) => dispatch(actions.setDataComplects(complectsData))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ComplectsTable);","import React, { useState, useEffect } from 'react';\r\nimport { Tabs, Tab } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport ExpForm from '../../components/exp/ExpForm';\r\nimport ExpTable from '../../components/exp/ExpTable';\r\nimport IncForm from '../../components/inc/IncForm';\r\nimport IncTable from '../../components/inc/IncTable';\r\nimport Storage from '../storage/Storage';\r\nimport ComplectsForm from '../complects/ComplectsForm';\r\nimport ComplectsTable from '../complects/ComplectsTable';\r\nimport './workArea.css';\r\nimport './Forms.css';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst WorkArea = props => {\r\n  //Ставлю стейт нал\r\n  const [showError, setShowError] = useState(false);\r\n\r\n  //З серва тягну дані для наповнення \r\n  useEffect(() => {\r\n    props.getDataEI(props.authData.idToken);\r\n  }, [showError] )\r\n\r\n  //На основі даних з серва хочу замутити новий стейт\r\n  useEffect(() => {\r\n    if (props.expData && Object.keys(props.expData).length > 0 ) {\r\n      props.createFormLists(props.expData)\r\n    }\r\n  }, [props.expData])  \r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Tabs defaultActiveKey=\"storage\" id=\"uncontrolled-tab-example\">\r\n        <Tab eventKey=\"exp\" title=\"Витрати\">\r\n          <ExpForm />\r\n          <ExpTable />\r\n        </Tab>\r\n        <Tab eventKey=\"inc\" title=\"Доходи\">\r\n          <IncForm />\r\n          <IncTable />\r\n        </Tab>\r\n        <Tab eventKey=\"storage\" title=\"Склад\">\r\n          <Storage />\r\n        </Tab>\r\n        <Tab eventKey=\"complects\" title=\"Комплекти\">\r\n          <ComplectsForm />\r\n          <ComplectsTable />\r\n        </Tab>\r\n      </Tabs>\r\n      {!props.authData.signedIn && <Redirect to=\"/sena-totem\" />}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    authData: state.auth,\r\n    expData: state.data.expData,\r\n    incData: state.data.incData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getDataEI: (idToken) => dispatch(actions.getDataEI(idToken)),\r\n    createFormLists: (expData) => dispatch(actions.createFormLists(expData))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkArea);","import React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Auth.css'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst Auth = (props) => {  \r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <div className=\"authForm\">\r\n            <Formik      \r\n            initialValues={{ \r\n              email: '',\r\n              password: ''\r\n            }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n              props.logIn(values);\r\n              setSubmitting(false);\r\n            }}\r\n          >\r\n            {({ isSubmitting, values, setFieldValue }) => (\r\n              <Form>\r\n                    <Field\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      placeholder=\"Email\"           \r\n                    />\r\n\r\n                    <Field\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      placeholder=\"Password\"              \r\n                    />\r\n                <button type=\"submit\" disabled={isSubmitting}>\r\n                  Log In\r\n                </button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </Col>\r\n    </Row>\r\n  </Container>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    \r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    logIn: (values) => dispatch(actions.logIn(values)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Navbar, Nav, Image } from 'react-bootstrap';\r\n\r\nimport Logo from '../../assets/images/logo.jpg';\r\nimport './Navigation.css';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst Navigation = props => {\r\n\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <NavLink to=\"/sena-totem\" exact>\r\n        <Navbar.Brand><Image src={Logo}/> </Navbar.Brand>\r\n      </NavLink>\r\n      <Nav className=\"mr-auto\">\r\n        <NavLink className=\"nav-link\" to=\"/sena-totem\" exact>Home</NavLink>\r\n        {props.authState && <NavLink className=\"nav-link\" to=\"/sena-totem/workarea\" exact>Work Area</NavLink>}\r\n        {props.authState && <button className=\"logout\" onClick={props.logOut}>Log Out</button >}\r\n      </Nav>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    authState: state.auth.signedIn\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    logOut: () => dispatch(actions.logOut()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);","import React from 'react';\r\nimport './Spinner.css'\r\n\r\nconst spinner = () => (\r\n  <div className=\"loader\">loading... :)</div>\r\n);\r\n\r\nexport default spinner;","import React, { useEffect } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport WorkArea from './containers/workArea/workArea';\nimport Auth from './containers/auth/Auth';\nimport Navigation from './containers/navigation/Navigation';\nimport Spinner from './ui/Spinner/Spinner'\nimport './App.css';\nimport * as actions from './store/actions/index';\n\nconst App = props => {\n  useEffect(() => {\n    props.authCheckState();\n  }, []);\n\n\n  return (\n    <React.Fragment>\n      <Navigation />\n      <Switch>        \n        <Route path=\"/sena-totem/workarea\" ><WorkArea /></Route>      \n        <Route path=\"/\" >\n          {!props.authData.signedIn && !props.authData.loading && <Auth /> }\n          {props.authData.loading && <Spinner />}\n        </Route>\n      </Switch>\n      {props.authData.signedIn && <Redirect to=\"/sena-totem/workarea\" />}\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    authData: state.auth\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    authCheckState: () => dispatch(actions.authCheckState())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n  expData: {},\r\n  incData: {},\r\n  complectsData: {},\r\n  lists: {    \r\n    wares: [],\r\n    subwares: [],\r\n    exps: [],\r\n    colors: []\r\n  },\r\n  loaded: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_DATA_EXP:\r\n      return {\r\n        ...state,\r\n        expData: action.exp,\r\n        loaded: true\r\n      };\r\n    case actionTypes.SET_DATA_INC:\r\n      return {\r\n        ...state,\r\n        incData: action.inc,\r\n        loaded: true\r\n      };\r\n    case actionTypes.SET_DATA_COMPLECTS:\r\n      return {\r\n        ...state,\r\n        complectsData: action.complects,\r\n        loaded: true\r\n      }\r\n    case actionTypes.CREATE_FORM_LISTS:\r\n      return {        \r\n        ...state,\r\n        lists: action.lists\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n  idToken: localStorage.getItem('token'),\r\n  userId: localStorage.getItem('userId'),\r\n  signedIn: false,\r\n  loading: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.LOG_IN_START:\r\n      return {\r\n        ...state,        \r\n        loading: true\r\n      };\r\n    case actionTypes.LOG_IN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        idToken: action.idToken,\r\n        userId: action.userId,\r\n        signedIn: true,\r\n        loading: false\r\n      };\r\n    case actionTypes.LOG_OUT:\r\n      return {\r\n        ...state,\r\n        idToken: null,\r\n        userId: null,\r\n        signedIn: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n  expTable: {},\r\n  incTable: {},\r\n  loaded: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.CREATE_EXP_TABLE:\r\n      return {\r\n        ...state,\r\n        expTable: action.expTable,\r\n        loaded: true\r\n      };\r\n    case actionTypes.CREATE_INC_TABLE:\r\n      return {\r\n        ...state,\r\n        incTable: action.incTable,\r\n        loaded: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport dataReducer from './store/reducers/data';\nimport authReducer from './store/reducers/auth';\nimport tablesReducer from './store/reducers/tables';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst rootReducer = combineReducers ({\n  data: dataReducer,\n  auth: authReducer,\n  tables: tablesReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n  applyMiddleware(thunk)\n));\n\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.edfb4b75.jpg\";"],"sourceRoot":""}